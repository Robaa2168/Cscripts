name: Update Version on File Change

on:
  push:
    branches:
      - master

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  update_version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Fetch all history
      run: git fetch --unshallow

    - name: Check for File Changes
      id: check_changes
      run: |
        changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        if [[ $changed_files == *"logger.c"* ]] || [[ $changed_files == *"logger.exe"* ]]; then
          echo "::set-output name=files_changed::true"
        else
          echo "::set-output name=files_changed::false"
        fi

    - name: Set up Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git remote set-url origin https://x-access-token:${{ secrets.MY_PERSONAL_ACCESS_TOKEN }}@github.com/Robaa2168/Cscripts.git

    - name: Increment Version if File Changed
      if: steps.check_changes.outputs.files_changed == 'true'
      run: |
        # Get latest tag
        latest_tag=$(git describe --tags --abbrev=0)
        
        # Extract major and minor versions
        major_version=$(echo $latest_tag | cut -d '.' -f 1 | cut -d 'v' -f 2)
        minor_version=$(echo $latest_tag | cut -d '.' -f 2)
        
        # Increment the minor version
        new_minor_version=$((minor_version + 1))
        
        # Construct new tag
        new_tag="v$major_version.$new_minor_version"
        
        # Tag the new version
        git tag $new_tag
        
        # Push the new tag
        git push origin $new_tag


